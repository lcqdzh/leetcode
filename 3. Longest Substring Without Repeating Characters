#3. Longest Substring Without Repeating Characters
#3. 无重复字符的最长子串
#思路是记录字符出现的位置
class Solution:
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        if len(s)==0:
            return 0
        max_len=0 #记录最大长度
        start=0 #记录开始长度
        dicts={}#记录字符的最近一次位置
        for i in range(len(s)):
            if s[i] in dicts and dicts[s[i]]>=start:#如果发现这个字符在start之后，说明重复了
                start=dicts[s[i]]+1 #从这个重复的字符后面重新开始计数
                print("start=",start)
            #每次循环都要重新计算最大长度 并更新
            dicts[s[i]]=i#更新字符出现的位置
            print(dicts)
            max_len=max(max_len,i-start+1)
            print("max_len",max_len)
            print("over")
        
s="abcabcbb"
Solution().lengthOfLongestSubstring(s)
